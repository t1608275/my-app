{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","wind","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","cod","_this","setState","main","temp","sys","speed","weather","stop","components_Title","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e83b4a6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = () => (\r\n  <div>\r\n    <h1 className=\"title-container__title\">Weather Finder</h1>\r\n    <h4 className=\"title-container__subtitle\">\r\n      Find out the temperature and much more...\r\n    </h4>\r\n  </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather__info\">\r\n    {props.city && props.country && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Location:\r\n        <span className=\"weather__value\">\r\n          {\" \"}\r\n          {props.city}, {props.country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {props.temperature && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Temperature:\r\n        <span className=\"weather__value\"> {props.temperature}Â°C </span>\r\n      </p>\r\n    )}\r\n    {props.humidity && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Humidity:\r\n        <span className=\"weather__value\"> {props.humidity} </span>\r\n      </p>\r\n    )}\r\n\r\n    {props.wind && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Wind:\r\n        <span className=\"weather__value\"> {props.wind} mph</span>\r\n      </p>\r\n    )}\r\n\r\n    {props.description && (\r\n      <p className=\"weather__key\">\r\n        {\" \"}\r\n        Conditions:\r\n        <span className=\"weather__value\"> {props.description} </span>\r\n      </p>\r\n    )}\r\n    {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nimport Title from \"./components/Title\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst API_KEY = \"0ecf6ee1a96564c76ab9180937e8a933\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    wind: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  };\r\n  getWeather = async e => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(\r\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\r\n    );\r\n    const data = await api_call.json();\r\n\r\n    if (city && country) {\r\n      // eslint-disable-next-line\r\n      if (data.cod == 404) {\r\n        this.setState({\r\n          temperature: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          humidity: undefined,\r\n          wind: undefined,\r\n          description: undefined,\r\n          error: \"Location not found\"\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temperature: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          humidity: data.main.humidity,\r\n          wind: data.wind.speed,\r\n          description: data.weather[0].description,\r\n          error: \"\"\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        wind: undefined,\r\n        description: undefined,\r\n        error: \"Fill in boxes!\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Title />\r\n                </div>\r\n                <div className=\"col-xs-7 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    wind={this.state.wind}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}